import java.util.Calendar
import java.text.SimpleDateFormat

import scala.util.matching.Regex

/**
Parse daily tcpdump file, and create ImeiTracking object for the tracking information of the elapsed minute.
For each IMEI appends information to a daily file, and maintains a file with the last information.
*/

object MicroService {

//  Variables
  val now = Calendar .getInstance().getTime()
//		  val val _today = now.get(Calendar.Mi) // (datetime.datetime.now()).strftime("%Y-%m-%d")
  val format = new SimpleDateFormat("yy-mm-dd")
  val _today = format.format( now )

//_today = now.get(Calendar.Mi) // (datetime.datetime.now()).strftime("%Y-%m-%d")
val log_path = "/data/IMEI_tracking/"
val application_log_path = "/data/logs/"
val tcpdump_log = "/data/incoming_traffic/incoming_traffic"

// regex getting relevant information from the tcpdump.
val regex = """(\+\d+)(,)(GPRMC,)(\d+\.\d+),\w,(\d+\.\d+),\w,(\d+\.\d+)(.*)(\d{6})(.*)(imei:)(\d+)""" r

//  Arguments parsing
//val parser = argparse.ArgumentParser(
//    description="tcpdump traffic parser."
//)
//parser.add_argument("-v", "--verbose", "--debug",
//                    help="increase output verbosity", action="store_true"
//                   )
//val args = parser.parse_args()


//  Logger et handler
val logger = logging.getLogger("traffic_parser")
logger.setLevel(logging.DEBUG)
val fh = logging.FileHandler(application_log_path + "traffic_parser_" + _today + ".log")
val fh.setLevel(logging.INFO)
val ch = logging.StreamHandler()

if( args.verbose ) {
    ch.setLevel(logging.DEBUG)
    fh.setLevel(logging.DEBUG)
} else {
    ch.setLevel(logging.INFO)
}
val formatter = logging.Formatter(
    "%(asctime)s - %(name)s - %(levelname)s - %(message)s")
fh.setFormatter(formatter)
ch.setFormatter(formatter)
logger.addHandler(fh)
logger.addHandler(ch)

}

/**gathering info on IMEI tracking. */
case class ImeiTracking( imei: String, msisdn: String, timetracked: String, datetracked: String,
    latitude: String, longitude: String ) {

	def __repr__() = {
      "IMEI { {0}, msisdn: {1}, timetracked: {2}, datetracked: {3}, latitude: {4}, longitude: {5}".format(imei, msisdn, timetracked, datetracked, latitude, longitude)
  }
}


/**Fonction erreur */
def fatal(msg) = {
    logger.error(msg)
    sys.exit(1)
  }

    /**
    Parsing tcpdump and building ImeiTracking objects.
    time must match utctime of the elapsed minute.
    Returns ImeiTracking list.
    */
def regex_on_tcpdump() = {

    val IMEI_list = Array()
    //  UTC time minus 1 minute used for the regex on the tcpdump
    val utctime = (datetime.datetime.utcnow()-datetime.timedelta(minutes=1)).strftime("%H%M")
    try {
        with open(tcpdump_log) as file {
            for line in file {
                val bim = regex.search(line)
                if( bim ) {
                    val msisdn = bim.group(1)
                    val timetracked = bim.group(4)
                    val latitude = bim.group(5)
                    val longitude = bim.group(6)
                    val datetracked = bim.group(8)
                    val imei = bim.group(11)
                    logger.debug("IMEI found in tcpdump  { " + str(imei) + " with timetracked : " +\
                    timetracked)
                    if( timetracked[ {4] == utctime) {
                        try {
                            val new_imei = ImeiTracking(imei, msisdn, timetracked, datetracked, latitude, longitude)
                            logger.info("IMEI tracked  { " + str(new_imei))
                            IMEI_list.append(new_imei)
                        except {
                            logger.error("Issue with the data extracted from the tcpdump, check the input file.")
    except {
        fatal("No tcpdump file available!")
    if( len(IMEI_list) == 0 ) {
        logger.info("no IMEI tracked during the elapsed minute.")
    return IMEI_list
  }
  }
  }
  }

    /**
    Formats results and returns a dict to be dumped in json.
    For time we pick date and time from tcpdump and returns only time but in the correct 
    time zone (we get UTC from tcpdump).
    */
def formating_results(ImeiTracking_obj) = {

    val input_dict = {}
    val local_tz = pytz.timezone("Europe/Paris")
    val input_dict["imei"] = ImeiTracking_obj.imei
    val input_dict["msisdn"] = ImeiTracking_obj.msisdn
    val time_from_tcpdump = ImeiTracking_obj.datetracked + ImeiTracking_obj.timetracked
    val time_1 = datetime.datetime.strptime(time_from_tcpdump[ {12], "%d%m%y%H%M%S")
    //  change tz
    val time_2 = time_1.replace(tzinfo=pytz.utc).astimezone(local_tz)
    //  we keep only hour {minute:second
    val time_3 = time_2.strftime("%H {%M:%S")
    val input_dict["time"] = time_3
    val input_dict["latitude"] = ImeiTracking_obj.latitude
    val input_dict["longitude"] = ImeiTracking_obj.longitude
    return input_dict
  }

def main() = {
    val result_list = regex_on_tcpdump()
    for a in result_list {
        val dailyoutput_file = os.path.join(log_path, _today + "_" + str(a.imei) + ".json")
        val liveoutput_file = os.path.join(log_path, str(a.imei) + ".json")
        val f1 = open(dailyoutput_file, "a")
        val f2 = open(liveoutput_file, "w")
        val towrite = json.dumps(formating_results(a))
        f1.write("%s \n" % towrite)
        f2.write("%s \n" % towrite)
  }

}
